import os
import logging
import json
from typing import List, Dict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from mcrcon import MCRcon

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Get admin IDs from environment variable
ADMIN_IDS = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',') if id.strip()]

# Create data directory if it doesn't exist
DATA_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'data')
os.makedirs(DATA_DIR, exist_ok=True)

# File to store servers data
SERVERS_FILE = os.path.join(DATA_DIR, 'servers.json')

# States for adding a new server
class AddServer(StatesGroup):
    waiting_for_name = State()
    waiting_for_host = State()
    waiting_for_port = State()
    waiting_for_password = State()

# States for executing commands
class CommandState(StatesGroup):
    waiting_for_command = State()
    console_mode = State()

def load_servers() -> Dict:
    try:
        with open(SERVERS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_servers(servers: Dict):
    with open(SERVERS_FILE, 'w') as f:
        json.dump(servers, f, indent=4)

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def get_user_servers(user_id: int) -> Dict:
    servers = load_servers()
    user_servers = servers.get(str(user_id), {})
    return user_servers

def save_user_servers(user_id: int, user_servers: Dict):
    servers = load_servers()
    servers[str(user_id)] = user_servers
    save_servers(servers)

async def execute_rcon_command(server: Dict, command: str) -> str:
    try:
        with MCRcon(server['host'], server['password'], port=server['port']) as mcr:
            response = mcr.command(command)
            return response
    except Exception as e:
        return f"Error executing command: {str(e)}"

def get_servers_keyboard(user_id: int) -> InlineKeyboardBuilder:
    user_servers = get_user_servers(user_id)
    builder = InlineKeyboardBuilder()
    
    for server_id, server in user_servers.items():
        builder.button(
            text=f"{server['name']} ({server['host']})",
            callback_data=f"select_server_{server_id}"
        )
    
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server")
    builder.adjust(1)
    return builder

@dp.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = get_servers_keyboard(message.from_user.id)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Minecraft RCON Bot!\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ Minecraft —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ RCON.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RCON –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –†–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥\n\n"
        "üõ† –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data.startswith("select_server_"))
async def select_server(callback: CallbackQuery):
    server_id = callback.data.split("_")[-1]
    user_servers = get_user_servers(callback.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"server_status_{server_id}")
    builder.button(text="üë• –ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω", callback_data=f"server_players_{server_id}")
    builder.button(text="‚öôÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"server_cmd_{server_id}")
    builder.button(text="üìü –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å", callback_data=f"open_console_{server_id}")
    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"delete_server_{server_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üéÆ –°–µ—Ä–≤–µ—Ä: {server['name']}\n"
        f"üåê –ê–¥—Ä–µ—Å: {server['host']}\n"
        f"üîå –ü–æ—Ä—Ç: {server['port']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "back_to_servers")
async def back_to_servers(callback: CallbackQuery):
    keyboard = get_servers_keyboard(callback.from_user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data.startswith("open_console_"))
async def open_console(callback: CallbackQuery, state: FSMContext):
    server_id = callback.data.split("_")[-1]
    user_servers = get_user_servers(callback.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await state.set_state(CommandState.console_mode)
    await state.update_data(server_id=server_id)
    
    await callback.message.edit_text(
        f"üìü –ö–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ {server['name']} –æ—Ç–∫—Ä—ã—Ç–∞\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /close –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª–∏."
    )

@dp.message(Command("close"))
async def close_console(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != CommandState.console_mode:
        return
    
    await state.clear()
    await message.answer("–ö–æ–Ω—Å–æ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    keyboard = get_servers_keyboard(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.message(CommandState.console_mode)
async def handle_console_command(message: Message, state: FSMContext):
    data = await state.get_data()
    server_id = data.get('server_id')
    
    if not server_id:
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    
    user_servers = get_user_servers(message.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    response = await execute_rcon_command(server, message.text)
    await message.answer(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{response}")

@dp.callback_query(F.data.startswith("delete_server_"))
async def delete_server(callback: CallbackQuery):
    server_id = callback.data.split("_")[-1]
    user_servers = get_user_servers(callback.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    del user_servers[server_id]
    save_user_servers(callback.from_user.id, user_servers)
    
    await callback.answer(f"–°–µ—Ä–≤–µ—Ä '{server['name']}' —É–¥–∞–ª–µ–Ω.")
    keyboard = get_servers_keyboard(callback.from_user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data.startswith("server_status_"))
async def server_status(callback: CallbackQuery):
    server_id = callback.data.split("_")[-1]
    user_servers = get_user_servers(callback.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    response = await execute_rcon_command(server, "list")
    await callback.message.edit_text(f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n{response}")

@dp.callback_query(F.data.startswith("server_players_"))
async def server_players(callback: CallbackQuery):
    server_id = callback.data.split("_")[-1]
    user_servers = get_user_servers(callback.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    response = await execute_rcon_command(server, "list")
    await callback.message.edit_text(f"–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω:\n{response}")

@dp.callback_query(F.data.startswith("server_cmd_"))
async def server_cmd(callback: CallbackQuery, state: FSMContext):
    server_id = callback.data.split("_")[-1]
    user_servers = get_user_servers(callback.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await callback.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await state.set_state(CommandState.waiting_for_command)
    await state.update_data(server_id=server_id)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server['name']}:\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

@dp.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    keyboard = get_servers_keyboard(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.message(CommandState.waiting_for_command)
async def handle_command(message: Message, state: FSMContext):
    data = await state.get_data()
    server_id = data.get('server_id')
    
    if not server_id:
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return
    
    user_servers = get_user_servers(message.from_user.id)
    server = user_servers.get(server_id)
    
    if not server:
        await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    response = await execute_rcon_command(server, message.text)
    await message.answer(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{response}")
    
    await state.clear()
    keyboard = get_servers_keyboard(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "add_server")
async def add_server_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddServer.waiting_for_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=InlineKeyboardBuilder().button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add").as_markup()
    )

@dp.callback_query(F.data == "cancel_add")
async def cancel_add_server(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = get_servers_keyboard(callback.from_user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

@dp.message(AddServer.waiting_for_name)
async def process_server_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddServer.waiting_for_host)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞:")

@dp.message(AddServer.waiting_for_host)
async def process_server_host(message: Message, state: FSMContext):
    await state.update_data(host=message.text)
    await state.set_state(AddServer.waiting_for_port)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç RCON (–æ–±—ã—á–Ω–æ 25575):")

@dp.message(AddServer.waiting_for_port)
async def process_server_port(message: Message, state: FSMContext):
    try:
        port = int(message.text)
        await state.update_data(port=port)
        await state.set_state(AddServer.waiting_for_password)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å RCON:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞:")

@dp.message(AddServer.waiting_for_password)
async def process_server_password(message: Message, state: FSMContext):
    data = await state.get_data()
    user_servers = get_user_servers(message.from_user.id)
    
    # Generate a new server ID
    server_id = str(len(user_servers) + 1)
    
    # Add new server
    user_servers[server_id] = {
        'name': data['name'],
        'host': data['host'],
        'port': data['port'],
        'password': message.text
    }
    
    save_user_servers(message.from_user.id, user_servers)
    await state.clear()
    
    keyboard = get_servers_keyboard(message.from_user.id)
    await message.answer(
        f"‚úÖ –°–µ—Ä–≤–µ—Ä '{data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=keyboard.as_markup()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 